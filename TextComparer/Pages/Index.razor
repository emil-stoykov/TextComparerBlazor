@page "/"
@inject ResultService resultService
@inject CompareText compareText
@inject ClipboardService clipboardService

<PageTitle>Text Comparer</PageTitle>
<div class="container-lg flex-wrap flex-sm-col flex-wrap" >
    <div class="p-4 m-3 pt-3 pb-3 justify-content-center align-content-center">
        <h1 class="text-center display-1 fw-bold">Text Comparer</h1>
    </div>
    <div class="row justify-content-center align-content-center">
        <div class="col col-12 border border-2 border-dark border-rounded rounded-2">
            <Popup @ref="popupRef" />
            <div class="row pt-3 mt-3 align-items-stretch justify-content-center flex-lg-row flex-column">
                @if (this.resultObj.ResultState == ResultStates.PROCESSING) {
                    <p class="fs-1 text-center">Loading...</p>
                } else if (this.resultObj.ResultState == ResultStates.FINISHED) {
                    <div class="col-auto col-lg-6">
                        <div class="p-2 pb-0">
                            <Tooltip Text="@tooltipCopyText">
                                <i @onclick="(() => CopyToClipboardAsync(TextEnum.FIRST))"
                                @onmouseover="(() => SetCopyIcon(true, 0))" @onmouseout="(() => SetCopyIcon(false, 0))"
                                class="@copyIcons[0] ps-1 pb-4" style="cursor: pointer"></i>
                            </Tooltip>

                            <p class="text-break border rounded-1 border-secondary bg-opacity-25 overflow-auto" style="height:500px;max-height:500px">
                                <table class="table table-sm table-borderless table-hover">
                                    <tbody>
                                        @for (int i = 0; i < compareText.FirstTextArr.Length; i++)
                                        {
                                            <tr class="position-relative">
                                                <th scope="row" style="width:2em;" class="align-text-bottom bg-secondary bg-opacity-25 fw-bold">@(i + 1).</th>
                                                <th class="align-text-bottom user-select-auto">@compareText.FirstTextArr[i]</th>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </p>
                        </div>
                    </div>
                    <div class="col-auto col-lg-6">
                        <div class="p-2 pb-0">
                            <Tooltip Text="@tooltipCopyText">
                                <i @onclick="(() => CopyToClipboardAsync(TextEnum.FIRST))"
                                @onmouseover="(() => SetCopyIcon(true, 1))" @onmouseout="(() => SetCopyIcon(false, 1))"
                                class="@copyIcons[1] ps-1 pb-4" style="cursor: pointer"></i>
                            </Tooltip>
                            <p class="text-break border rounded-1 border-secondary bg-opacity-25 overflow-auto" style="height:500px;max-height:500px">
                                <table class="table table-sm table-borderless table-hover">
                                    <tbody>
                                        @for (int i = 0; i < displayTextArr.GetLength(0); i++) {
                                            <tr class="position-relative">
                                                <th scope="row" style="width:2em;" class="align-text-bottom bg-secondary bg-opacity-25 fw-bold">@(i + 1).</th>
                                                <th class="align-text-bottom user-select-auto">
                                                    @displayTextArr[i,0]
                                                    @if (!string.IsNullOrEmpty(displayTextArr[i, 1])) {
                                                        <span style="background-color:rgb(184, 151, 184);">@displayTextArr[i,1]</span>
                                                    }
                                                </th>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </p>
                        </div>
                    </div>
                    <div class="row gy-3 gap-3 p-3 m-2 mb-1 align-items-center justify-content-center">
                        <div class="col-auto col-lg-2 text-end d-grid gap-1">
                            <button @onclick="ResetTexts" class="btn btn-dark btn-lg">Reset</button>
                        </div>
                    </div>
                } else {
                    <EditForm Model="@compareText" OnInvalidSubmit=@ShowEmptyTextareaError OnValidSubmit=@CompareTextsAsync>
                        <DataAnnotationsValidator/>
                         <div class="row justify-content-center">
                            <div class="col-auto col-lg-6">
                                <div class="p-2 form-floating">
                                    <label for="floatingTextarea1">Paste the first text here.</label>
                                    <InputTextArea class="form-control text-break border border-secondary bg-opacity-25" 
                                    style="resize:none;height:500px;max-height:500px;min-height:150px;" id="floatingTextarea1"
                                    required spellcheck="false"
                                    @bind-Value="compareText.FirstTextInput">
                                    </InputTextArea>
                                    <ValidationMessage For="@(() => compareText.FirstTextInput)"/>
                                </div>
                            </div>
                            <div class="col-auto col-lg-6">
                                <div class="p-2 form-floating">
                                    <label for="floatingTextarea2">Paste the second text here.</label>
                                    <InputTextArea class="form-control text-break border border-secondary bg-opacity-25" 
                                    style="resize:none;height:500px;max-height:500px;min-height:150px;" 
                                    id="floatingTextarea2" 
                                    required spellcheck="false"
                                    @bind-Value="compareText.SecondTextInput">
                                    </InputTextArea>
                                    <ValidationMessage For="@(() => compareText.SecondTextInput)" />
                                </div>
                            </div>
                            <div class="row gy-3 gap-3 p-3 m-2 mb-1 align-items-center justify-content-center">
                                <div class="col-auto col-lg-2 text-end d-grid gap-1">
                                    <button @onclick="ResetTexts" class="btn btn-dark btn-lg">
                                        Clear Text
                                    </button>
                                </div>
                                <div class="col-auto col-lg-2 text-start d-grid gap-1">
                                    <button type="submit" class="btn btn-compare btn-lg"
                                            disabled="@(resultObj.ResultState == ResultStates.FINISHED)">
                                        Compare
                                    </button>
                                </div>
                            </div>
                         </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private Result resultObj = new Result();
    public string[,] displayTextArr;
    private Popup popupRef;
    private bool isHovering = false;
    private string[] copyIcons = { "fa-regular fa-copy", "fa-regular fa-copy" };
    private string tooltipCopyText = "Copy text";

    private void ShowEmptyTextareaError()
    {
        popupRef.Show(EmptyTextareaError);
        ResetTexts();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        this.resultService = new ResultService();
        this.compareText = new CompareText();
    }

    private async Task CompareTextsAsync()
    {
        StateHasChanged();

        try {
            compareText.FirstTextArr = compareText.FirstTextInput.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            compareText.SecondTextArr = compareText.SecondTextInput.Split('\n', StringSplitOptions.RemoveEmptyEntries);

            this.resultObj = await this.resultService.CheckLines(compareText.FirstTextArr, compareText.SecondTextArr);

            StateHasChanged();
            // multidimensional string for displaying the second text
            displayTextArr = new string[compareText.SecondTextArr.Length ,2];

            // iterate over the text until the largest index is reached
            if (this.resultObj.ErrorCount != 0)
            {
                for (int i = 0; i <= this.resultObj.LinesWithError.Max(); i++)
                {
                    string[] errorTxt = new string[2];
                    if (this.resultObj.LinesWithError.Contains(i))
                    {
                        errorTxt = await this.resultService.MarkErrorPointAsync(compareText.FirstTextArr[i], compareText.SecondTextArr[i]);
                    } else {
                        errorTxt = new string[] { compareText.SecondTextArr[i], string.Empty };
                    }

                    displayTextArr[i, 0] = errorTxt[0];
                    displayTextArr[i, 1] = errorTxt[1];
                }            
            }

            // fill the rest of the array
            for (int i = this.resultObj.ErrorCount != 0 ? this.resultObj.LinesWithError.Max() + 1 : 0; i < compareText.SecondTextArr.Length; i++)
            {
                displayTextArr[i, 0] = compareText.SecondTextArr[i];
            }
            this.resultObj.ResultState = ResultStates.FINISHED;

        } catch {
            // TODO: Fix the error handling
        }
        StateHasChanged();
    }

    private void ResetTexts()
    {
        this.resultService = new ResultService();
        this.resultObj = new Result();
        this.compareText = new CompareText();
    }

    private async Task CopyToClipboardAsync(TextEnum copyTextValue)
    {
        try
        {
            await clipboardService.WriteTextAsync(compareText.GetFullText(copyTextValue));
            tooltipCopyText = "Copied!";
        } catch (Exception ex)
        {
            // TODO: fix the error handling in the mainlayout
            throw new NotImplementedException();
        }
    }

    private void SetCopyIcon(bool val, int idx)
    {
        isHovering = val;
        copyIcons[idx] = isHovering ? "fa-solid fa-copy" : "fa-regular fa-copy";
        tooltipCopyText = "Copy text";
    }

}
