@page "/"
@inject ResultService resultService
@using System.Web;

<PageTitle>Text Comparer</PageTitle>
<div class="container-lg flex-wrap flex-sm-col flex-wrap" >
    <div class="p-4 m-3 pt-3 pb-3 justify-content-center align-content-center">
        <h1 class="text-center display-1 fw-bold">Text Comparer</h1>
    </div>
    <div class="row justify-content-center align-content-center">
        <div class="col col-12 border border-2 border-dark border-rounded rounded-2">
            <div class="row pt-3 mt-3 align-items-stretch justify-content-center flex-lg-row flex-column">
                @if (this.resultObj.ResultState == ResultStates.PROCESSING) {
                    <p class="fs-1 text-center">Loading...</p>
                } else if (this.resultObj.ResultState == ResultStates.FINISHED) {
                    <div class="col-auto col-lg-6">
                        <div class="p-2 pb-0">
                            <p class="text-break border rounded-1 border-secondary bg-opacity-25 overflow-auto" style="height:500px;max-height:500px">
                                <table class="table table-sm table-borderless table-hover">
                                    <tbody>
                                        @for (int i = 0; i < text1param.Length; i++)
                                        {
                                            <tr>
                                                <th scope="row" style="width:2em;" class="bg-secondary bg-opacity-25 fw-light">@(i + 1).</th>
                                                <th>@text1param[i]</th>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </p>
                        </div>
                    </div>
                    <div class="col-auto col-lg-6">
                        <div class="p-2 pb-0">
                            <p class="text-break border rounded-1 border-secondary bg-opacity-25 overflow-auto" style="height:500px;max-height:500px">
                                <table class="table table-sm table-borderless table-hover">
                                    <tbody>
                                        @for (int i = 0; i < displayTextArr.GetLength(0); i++) {
                                            <tr>
                                                <th scope="row" style="width:2em;" class="bg-secondary bg-opacity-25 fw-light">@(i + 1).</th>
                                                <th>@displayTextArr[i,0]<span style="background-color:rgb(184, 151, 184);l">@displayTextArr[i,1]</span></th>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </p>
                        </div>
                    </div>
                } else
                {
                    <div class="col-auto col-lg-6">
                        <div class="p-2 form-floating">
                            <textarea class="form-control text-break border border-secondary bg-opacity-25" 
                            style="resize:none;height:500px;max-height:500px;min-height:150px;" 
                            id="floatingTextarea1"
                            required
                            @bind="textInput1"
                            spellcheck="false">
                            </textarea>
                            <label for="floatingTextarea1">Paste the first text here.</label>
                        </div>
                    </div>
                    <div class="col-auto col-lg-6">
                        <div class="p-2 form-floating">
                            <textarea class="form-control text-break border border-secondary bg-opacity-25" 
                            style="resize:none;height:500px;max-height:500px;min-height:150px;" 
                            id="floatingTextarea2"
                            @bind="textInput2"
                            required
                            spellcheck="false">
                            </textarea>
                            <label for="floatingTextarea2">Paste the second text here.</label>
                        </div>
                    </div>                    
                }
            </div>
            <div class="row gy-3 gap-3 p-3 m-2 mb-1 align-items-center justify-content-center">
                <div class="col-auto col-lg-2 text-end d-grid gap-1">
                    <button @onclick="ResetTexts" class="btn btn-dark btn-lg">Reset</button>
                </div>
                <div class="col-auto col-lg-2 text-start d-grid gap-1">
                    <button @onclick="CompareTextsAsync" class="btn btn-compare btn-lg" 
                    disabled="@(resultObj.ResultState == ResultStates.FINISHED)">Compare</button>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public string textInput1 = string.Empty;
    public string textInput2 = string.Empty;
    public string[] text1param = null;
    public string[] text2param = null;
    private Result resultObj = new Result();
    public int IdxCounter = -1;
    public string[,] displayTextArr;

    protected override void OnInitialized()
    {
        this.resultService = new ResultService();
    }

    private async Task CompareTextsAsync()
    {
        //StateHasChanged();
        text1param = textInput1.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        text2param = textInput2.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        this.resultObj = await this.resultService.CheckLines(text1param, text2param);
        StateHasChanged();
        // multidimensional string for displaying the second text
        displayTextArr = new string[text2param.Length ,2];

        // iterate over the text until the largest index is reached
        if (this.resultObj.ErrorCount != 0)
        {
            for (int i = 0; i <= this.resultObj.LinesWithError.Max(); i++)
            {
                string[] errorTxt = new string[2];
                if (this.resultObj.LinesWithError.Contains(i))
                {
                    errorTxt = await this.resultService.MarkErrorPointAsync(text1param[i], text2param[i]);
                } else {
                    errorTxt = new string[] { text2param[i], string.Empty };
                }

                displayTextArr[i, 0] = errorTxt[0];
                displayTextArr[i, 1] = errorTxt[1];
            }            
        }

        // fill the rest of the array
        for (int i = this.resultObj.ErrorCount != 0 ? this.resultObj.LinesWithError.Max() + 1 : 0; i < text2param.Length; i++)
        {
            displayTextArr[i, 0] = text2param[i];
            displayTextArr[i, 1] = string.Empty;
        }
        this.resultObj.ResultState = ResultStates.FINISHED;
    }

    private void ResetTexts()
    {
        textInput1 = string.Empty;
        textInput2 = string.Empty;
        this.resultService = new ResultService();
        this.resultObj = new Result();
        IdxCounter = -1;
    }
}